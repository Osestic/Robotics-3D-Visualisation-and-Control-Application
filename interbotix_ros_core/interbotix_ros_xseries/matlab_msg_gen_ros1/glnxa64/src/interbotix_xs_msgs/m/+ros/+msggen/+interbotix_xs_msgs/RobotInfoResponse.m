
classdef RobotInfoResponse < ros.Message
    %RobotInfoResponse MATLAB implementation of interbotix_xs_msgs/RobotInfoResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'interbotix_xs_msgs/RobotInfoResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '23accaf5885f241d75742c1e9c1c0448' % The MD5 Checksum of the message definition
        PropertyList = { 'Mode' 'ProfileType' 'JointNames' 'JointIds' 'JointLowerLimits' 'JointUpperLimits' 'JointVelocityLimits' 'JointSleepPositions' 'JointStateIndices' 'NumJoints' 'Name' } % List of non-constant message properties
        ROSPropertyList = { 'mode' 'profile_type' 'joint_names' 'joint_ids' 'joint_lower_limits' 'joint_upper_limits' 'joint_velocity_limits' 'joint_sleep_positions' 'joint_state_indices' 'num_joints' 'name' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Mode
        ProfileType
        JointNames
        JointIds
        JointLowerLimits
        JointUpperLimits
        JointVelocityLimits
        JointSleepPositions
        JointStateIndices
        NumJoints
        Name
    end
    methods
        function set.Mode(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'RobotInfoResponse', 'Mode');
            obj.Mode = char(val);
        end
        function set.ProfileType(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'RobotInfoResponse', 'ProfileType');
            obj.ProfileType = char(val);
        end
        function set.JointNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RobotInfoResponse', 'JointNames');
            obj.JointNames = cell(val);
        end
        function set.JointIds(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int16.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RobotInfoResponse', 'JointIds');
            obj.JointIds = int16(val);
        end
        function set.JointLowerLimits(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RobotInfoResponse', 'JointLowerLimits');
            obj.JointLowerLimits = single(val);
        end
        function set.JointUpperLimits(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RobotInfoResponse', 'JointUpperLimits');
            obj.JointUpperLimits = single(val);
        end
        function set.JointVelocityLimits(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RobotInfoResponse', 'JointVelocityLimits');
            obj.JointVelocityLimits = single(val);
        end
        function set.JointSleepPositions(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RobotInfoResponse', 'JointSleepPositions');
            obj.JointSleepPositions = single(val);
        end
        function set.JointStateIndices(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int16.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RobotInfoResponse', 'JointStateIndices');
            obj.JointStateIndices = int16(val);
        end
        function set.NumJoints(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RobotInfoResponse', 'NumJoints');
            obj.NumJoints = int16(val);
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RobotInfoResponse', 'Name');
            obj.Name = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.interbotix_xs_msgs.RobotInfoResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.interbotix_xs_msgs.RobotInfoResponse(strObj);
        end
    end
end
