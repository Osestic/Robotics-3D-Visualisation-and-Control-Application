
classdef LocobotJoy < ros.Message
    %LocobotJoy MATLAB implementation of interbotix_xs_msgs/LocobotJoy
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'interbotix_xs_msgs/LocobotJoy' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '31ceb27301fc34085add57595354ba17' % The MD5 Checksum of the message definition
        PropertyList = { 'BaseXCmd' 'BaseThetaCmd' 'BaseResetOdomCmd' 'PanCmd' 'TiltCmd' 'EeXCmd' 'EeYCmd' 'EeZCmd' 'EeRollCmd' 'EePitchCmd' 'WaistCmd' 'GripperCmd' 'PoseCmd' 'SpeedCmd' 'SpeedToggleCmd' 'GripperPwmCmd' } % List of non-constant message properties
        ROSPropertyList = { 'base_x_cmd' 'base_theta_cmd' 'base_reset_odom_cmd' 'pan_cmd' 'tilt_cmd' 'ee_x_cmd' 'ee_y_cmd' 'ee_z_cmd' 'ee_roll_cmd' 'ee_pitch_cmd' 'waist_cmd' 'gripper_cmd' 'pose_cmd' 'speed_cmd' 'speed_toggle_cmd' 'gripper_pwm_cmd' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        RESETODOM = int8(1)
        PANCCW = int8(2)
        PANCW = int8(3)
        TILTUP = int8(4)
        TILTDOWN = int8(5)
        PANTILTHOME = int8(6)
        EEXINC = int8(7)
        EEXDEC = int8(8)
        EEYINC = int8(9)
        EEYDEC = int8(10)
        EEZINC = int8(11)
        EEZDEC = int8(12)
        EEROLLCCW = int8(13)
        EEROLLCW = int8(14)
        EEPITCHUP = int8(15)
        EEPITCHDOWN = int8(16)
        WAISTCCW = int8(17)
        WAISTCW = int8(18)
        GRIPPEROPEN = int8(19)
        GRIPPERCLOSE = int8(20)
        HOMEPOSE = int8(21)
        SLEEPPOSE = int8(22)
        SPEEDINC = int8(23)
        SPEEDDEC = int8(24)
        SPEEDCOURSE = int8(25)
        SPEEDFINE = int8(26)
        GRIPPERPWMINC = int8(27)
        GRIPPERPWMDEC = int8(28)
    end
    properties
        BaseXCmd
        BaseThetaCmd
        BaseResetOdomCmd
        PanCmd
        TiltCmd
        EeXCmd
        EeYCmd
        EeZCmd
        EeRollCmd
        EePitchCmd
        WaistCmd
        GripperCmd
        PoseCmd
        SpeedCmd
        SpeedToggleCmd
        GripperPwmCmd
    end
    methods
        function set.BaseXCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'BaseXCmd');
            obj.BaseXCmd = double(val);
        end
        function set.BaseThetaCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'BaseThetaCmd');
            obj.BaseThetaCmd = double(val);
        end
        function set.BaseResetOdomCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'BaseResetOdomCmd');
            obj.BaseResetOdomCmd = int8(val);
        end
        function set.PanCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'PanCmd');
            obj.PanCmd = int8(val);
        end
        function set.TiltCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'TiltCmd');
            obj.TiltCmd = int8(val);
        end
        function set.EeXCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'EeXCmd');
            obj.EeXCmd = int8(val);
        end
        function set.EeYCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'EeYCmd');
            obj.EeYCmd = int8(val);
        end
        function set.EeZCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'EeZCmd');
            obj.EeZCmd = int8(val);
        end
        function set.EeRollCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'EeRollCmd');
            obj.EeRollCmd = int8(val);
        end
        function set.EePitchCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'EePitchCmd');
            obj.EePitchCmd = int8(val);
        end
        function set.WaistCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'WaistCmd');
            obj.WaistCmd = int8(val);
        end
        function set.GripperCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'GripperCmd');
            obj.GripperCmd = int8(val);
        end
        function set.PoseCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'PoseCmd');
            obj.PoseCmd = int8(val);
        end
        function set.SpeedCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'SpeedCmd');
            obj.SpeedCmd = int8(val);
        end
        function set.SpeedToggleCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'SpeedToggleCmd');
            obj.SpeedToggleCmd = int8(val);
        end
        function set.GripperPwmCmd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LocobotJoy', 'GripperPwmCmd');
            obj.GripperPwmCmd = int8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.interbotix_xs_msgs.LocobotJoy.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.interbotix_xs_msgs.LocobotJoy(strObj);
        end
    end
end
